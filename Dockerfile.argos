# Argos Translate Dockerfile with Thai Language Support
# Builds offline translation service for Thai â†” English

FROM python:3.11-slim

LABEL maintainer="Q-Collector Team"
LABEL description="Argos Translate Server with Thai Language Model"
LABEL version="1.0.0"

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY backend/services/requirements-argos.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements-argos.txt

# Pre-download and install Thai language models
# This runs during build time to avoid slow startup
RUN echo "Downloading Thai language models..." && \
    python -c "import argostranslate.package; \
    import logging; \
    logging.basicConfig(level=logging.INFO); \
    logger = logging.getLogger(__name__); \
    logger.info('Updating package index...'); \
    argostranslate.package.update_package_index(); \
    packages = argostranslate.package.get_available_packages(); \
    logger.info(f'Found {len(packages)} packages'); \
    th_en = next((p for p in packages if p.from_code=='th' and p.to_code=='en'), None); \
    if th_en: \
        logger.info(f'Downloading Thai->English v{th_en.package_version}...'); \
        path = th_en.download(); \
        argostranslate.package.install_from_path(path); \
        logger.info('Thai->English installed'); \
    else: \
        logger.error('Thai->English not found!'); \
    en_th = next((p for p in packages if p.from_code=='en' and p.to_code=='th'), None); \
    if en_th: \
        logger.info(f'Downloading English->Thai v{en_th.package_version}...'); \
        path = en_th.download(); \
        argostranslate.package.install_from_path(path); \
        logger.info('English->Thai installed'); \
    else: \
        logger.warning('English->Thai not found (optional)'); \
    logger.info('Model installation complete');"

# Copy application code
COPY backend/services/argos-translate-server.py .

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Run server
CMD ["python", "argos-translate-server.py"]
