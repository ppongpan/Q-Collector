# ============================================
# Q-Collector Backend Environment Variables
# ============================================
# Copy this file to .env and update with your actual values
# NEVER commit .env file to version control!

# ============================================
# Node Environment
# ============================================
# Values: development, production, test
NODE_ENV=development

# ============================================
# API Server Configuration
# ============================================
# Port the API server will listen on
PORT=5000
API_PORT=5000

# Base URL for the API (used in responses)
API_URL=http://localhost:5000

# API version prefix
API_VERSION=v1

# ============================================
# PostgreSQL Database Configuration
# ============================================
# Database connection details
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=qcollector_db
POSTGRES_USER=qcollector
POSTGRES_PASSWORD=your_secure_password_here

# Full database URL (alternative to individual settings)
DATABASE_URL=postgresql://qcollector:your_secure_password_here@localhost:5432/qcollector_db

# Connection pool settings
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_POOL_IDLE=10000

# ============================================
# Redis Configuration
# ============================================
# Redis connection details
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password_here

# Full Redis URL (alternative to individual settings)
REDIS_URL=redis://:your_redis_password_here@localhost:6379

# Redis database number (0-15)
REDIS_DB=0

# Session TTL in seconds (default: 7 days)
REDIS_SESSION_TTL=604800

# Cache TTL in seconds (default: 1 hour)
REDIS_CACHE_TTL=3600

# ============================================
# MinIO Object Storage Configuration
# ============================================
# MinIO server endpoint (without http://)
MINIO_ENDPOINT=localhost
MINIO_PORT=9000

# MinIO credentials
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=your_minio_password_here

# MinIO access keys (same as root credentials for simplicity)
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=your_minio_password_here

# Use SSL/TLS (true for production, false for development)
MINIO_USE_SSL=false

# Default bucket name for file uploads
MINIO_BUCKET=qcollector

# ============================================
# JWT Authentication Configuration
# ============================================
# Secret key for signing JWT tokens (MUST BE RANDOM AND SECURE!)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your_jwt_secret_key_here_minimum_32_characters_use_random_string

# Access token expiration time
# Examples: 15m, 1h, 24h
JWT_EXPIRES_IN=15m

# Refresh token expiration time
# Examples: 7d, 30d, 90d
JWT_REFRESH_EXPIRES_IN=7d

# JWT algorithm (HS256, HS384, HS512)
JWT_ALGORITHM=HS256

# JWT issuer
JWT_ISSUER=qcollector

# ============================================
# Data Encryption Configuration
# ============================================
# Encryption key for PII data (MUST BE 32 BYTES IN HEX!)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your_32_byte_hex_encryption_key_here_64_characters_long

# Encryption algorithm (aes-256-gcm recommended)
ENCRYPTION_ALGORITHM=aes-256-gcm

# ============================================
# CORS Configuration
# ============================================
# Allowed origins (comma-separated for multiple origins)
CORS_ORIGIN=http://localhost:3000,http://localhost:3001

# CORS credentials
CORS_CREDENTIALS=true

# CORS methods
CORS_METHODS=GET,POST,PUT,DELETE,PATCH,OPTIONS

# ============================================
# Security Configuration
# ============================================
# Rate limiting - login attempts
RATE_LIMIT_LOGIN_WINDOW_MS=900000
RATE_LIMIT_LOGIN_MAX_ATTEMPTS=5

# Rate limiting - API requests per IP
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Session secret for express-session
SESSION_SECRET=your_session_secret_here

# Password hashing rounds (bcrypt - higher is more secure but slower)
BCRYPT_ROUNDS=12

# ============================================
# File Upload Configuration
# ============================================
# Maximum file size in bytes (10MB = 10485760)
MAX_FILE_SIZE=10485760

# Allowed MIME types (comma-separated)
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document

# Maximum number of files per upload
MAX_FILES_PER_UPLOAD=10

# ============================================
# Logging Configuration
# ============================================
# Log level: error, warn, info, http, verbose, debug, silly
LOG_LEVEL=info

# Log file path
LOG_FILE=logs/app.log

# Error log file path
LOG_ERROR_FILE=logs/error.log

# Maximum log file size before rotation (10MB)
LOG_MAX_SIZE=10485760

# Maximum number of log files to keep
LOG_MAX_FILES=10

# Enable console logging (true/false)
LOG_CONSOLE=true

# ============================================
# Email Configuration (Optional)
# ============================================
# SMTP server for sending emails
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_email_password

# Email sender details
EMAIL_FROM=noreply@qcollector.com
EMAIL_FROM_NAME=Q-Collector

# ============================================
# Telegram Bot Configuration (Optional)
# ============================================
# Telegram bot token from @BotFather
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Default Telegram chat ID for notifications
TELEGRAM_CHAT_ID=your_chat_id_here

# Enable Telegram notifications (true/false)
TELEGRAM_ENABLED=false

# ============================================
# External APIs (Optional)
# ============================================
# Google Maps API key (for location fields)
GOOGLE_MAPS_API_KEY=your_google_maps_api_key

# Other API keys as needed
# OPENAI_API_KEY=your_openai_api_key
# SENDGRID_API_KEY=your_sendgrid_api_key

# ============================================
# Feature Flags
# ============================================
# Enable audit logging
ENABLE_AUDIT_LOG=true

# Enable request logging
ENABLE_REQUEST_LOG=true

# Enable file upload
ENABLE_FILE_UPLOAD=true

# Enable email notifications
ENABLE_EMAIL_NOTIFICATIONS=false

# Enable Telegram notifications
ENABLE_TELEGRAM_NOTIFICATIONS=false

# ============================================
# Development/Debug Configuration
# ============================================
# Enable debug mode
DEBUG=false

# Enable SQL query logging
DEBUG_SQL=false

# Enable verbose error messages (DISABLE IN PRODUCTION!)
VERBOSE_ERRORS=true

# Enable hot reload
HOT_RELOAD=true

# ============================================
# Production-Specific Configuration
# ============================================
# Trust proxy (set to true if behind nginx/load balancer)
TRUST_PROXY=false

# Cluster mode (number of worker processes, 0 = CPU cores)
CLUSTER_WORKERS=0

# ============================================
# Monitoring & Analytics (Optional)
# ============================================
# Sentry DSN for error tracking
# SENTRY_DSN=your_sentry_dsn

# Google Analytics ID
# GA_TRACKING_ID=UA-XXXXXXXXX-X

# ============================================
# Backup Configuration (Optional)
# ============================================
# S3 bucket for database backups
# BACKUP_S3_BUCKET=qcollector-backups
# BACKUP_S3_REGION=us-east-1
# BACKUP_S3_ACCESS_KEY=your_s3_access_key
# BACKUP_S3_SECRET_KEY=your_s3_secret_key

# Backup schedule (cron format)
# BACKUP_SCHEDULE=0 2 * * *

# ============================================
# Notes
# ============================================
# 1. Generate secure random keys for JWT_SECRET and ENCRYPTION_KEY
# 2. Never commit .env file to version control
# 3. Use different values for development, staging, and production
# 4. Rotate secrets regularly in production
# 5. Use environment-specific .env files (.env.development, .env.production)
# 6. Store production secrets in secure vault (AWS Secrets Manager, HashiCorp Vault, etc.)