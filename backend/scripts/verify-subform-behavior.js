const { Sequelize } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(
  process.env.POSTGRES_DB || 'qcollector_db',
  process.env.POSTGRES_USER || 'qcollector',
  process.env.POSTGRES_PASSWORD || 'qcollector_dev_2025',
  {
    host: process.env.POSTGRES_HOST || 'localhost',
    dialect: 'postgres',
    logging: false
  }
);

async function verifySubFormBehavior() {
  try {
    console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sub-form ===\n');

    // 1. Check main form table
    const [mainFormRecords] = await sequelize.query(`
      SELECT id, username, submitted_at
      FROM first_form_b8f25df76413
      ORDER BY submitted_at DESC
      LIMIT 5
    `);

    console.log('üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Main Form (first_form_b8f25df76413):');
    console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${mainFormRecords.length}`);
    mainFormRecords.forEach((record, index) => {
      console.log(`   ${index + 1}. ID: ${record.id}, Username: ${record.username}, ‡πÄ‡∏ß‡∏•‡∏≤: ${record.submitted_at}`);
    });

    // 2. Check sub-form table
    const [subFormRecords] = await sequelize.query(`
      SELECT id, parent_id, username, submitted_at
      FROM call_records_333a357b0cb2
      ORDER BY submitted_at DESC
      LIMIT 10
    `);

    console.log('\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Sub-form (call_records_333a357b0cb2):');
    console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${subFormRecords.length}`);
    subFormRecords.forEach((record, index) => {
      console.log(`   ${index + 1}. ID: ${record.id}, Parent: ${record.parent_id}, Username: ${record.username}, ‡πÄ‡∏ß‡∏•‡∏≤: ${record.submitted_at}`);
    });

    // 3. Verify parent_id references
    console.log('\nüîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (Foreign Key):');
    if (subFormRecords.length > 0) {
      const parentId = subFormRecords[0].parent_id;

      // Check if parent exists in submissions table
      const [parentSubmission] = await sequelize.query(`
        SELECT id, form_id, submitted_at
        FROM submissions
        WHERE id = '${parentId}'
      `);

      if (parentSubmission.length > 0) {
        console.log(`   ‚úÖ parent_id ${parentId} ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà submissions table`);
        console.log(`      Form ID: ${parentSubmission[0].form_id}`);
        console.log(`      ‡πÄ‡∏ß‡∏•‡∏≤: ${parentSubmission[0].submitted_at}`);
      } else {
        console.log(`   ‚ùå parent_id ${parentId} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô submissions table`);
      }

      // Check if parent exists in main form dynamic table
      const [parentInMainTable] = await sequelize.query(`
        SELECT id, username, submitted_at
        FROM first_form_b8f25df76413
        WHERE id = '${parentId}'
      `);

      if (parentInMainTable.length > 0) {
        console.log(`   ‚ùå parent_id ${parentId} ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà main form table (‡∏ú‡∏¥‡∏î!)`);
      } else {
        console.log(`   ‚úÖ parent_id ‡πÑ‡∏°‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà main form table (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!)`);
      }
    }

    // 4. Summary
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ:');
    console.log(`   - Main form table ‡∏°‡∏µ ${mainFormRecords.length} ‡πÅ‡∏ñ‡∏ß (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß = 1 main submission)`);
    console.log(`   - Sub-form table ‡∏°‡∏µ ${subFormRecords.length} ‡πÅ‡∏ñ‡∏ß (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß = 1 sub-form entry)`);
    console.log(`   - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° sub-form entry ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô sub-form table ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`);
    console.log(`   - Main form table ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á`);

    await sequelize.close();
    console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  }
}

verifySubFormBehavior();
