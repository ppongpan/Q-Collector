/**
 * Seed File: Sample Notification Rules
 *
 * Creates sample notification rules for testing Q-Collector v0.8.0 Telegram Notification System
 *
 * Usage:
 *   node backend/seeds/notification-rules-seed.js
 *
 * Prerequisites:
 *   - Database migrations completed
 *   - At least one form and user exists in the database
 *   - TELEGRAM_BOT_TOKEN and TELEGRAM_GROUP_ID in .env (optional, can use test values)
 */

const { sequelize } = require('../config/database.config');
const { NotificationRule, Form, User } = require('../models');
const logger = require('../utils/logger.util');

/**
 * Sample notification rules to be seeded
 */
const sampleRules = [
  {
    name: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    description: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö field_update trigger)',
    trigger_type: 'field_update',
    condition_formula: '[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢] = "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ"',
    message_template: 'üéâ **‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**\n\n' +
                      'üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      'üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: {‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢} ‡∏ö‡∏≤‡∏ó\n' +
                      'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å}\n\n' +
                      '‚ú® ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!',
    is_enabled: true,
    send_once: true,
    priority: 'high',
    target_field_id: null, // Watch all fields
    schedule: null,
  },
  {
    name: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á - ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000 ‡∏ö‡∏≤‡∏ó',
    description: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000 ‡∏ö‡∏≤‡∏ó (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)',
    trigger_type: 'field_update',
    condition_formula: 'AND([‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢] > 100000, [‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢] = "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ")',
    message_template: 'üí∞ **‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á!**\n\n' +
                      'üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      'üíµ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: {‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢} ‡∏ö‡∏≤‡∏ó\n' +
                      'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢}\n\n' +
                      'üöÄ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å!',
    is_enabled: true,
    send_once: true,
    priority: 'high',
    target_field_id: null,
    schedule: null,
  },
  {
    name: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP',
    description: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏ó‡∏î‡∏™‡∏≠‡∏ö CONTAINS function)',
    trigger_type: 'field_update',
    condition_formula: 'CONTAINS([‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤], "VIP")',
    message_template: 'üëë **‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP**\n\n' +
                      'üë§ ‡∏ä‡∏∑‡πà‡∏≠: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      'üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: {‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£}\n' +
                      '‚úâÔ∏è ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {‡∏≠‡∏µ‡πÄ‡∏°‡∏•}\n\n' +
                      '‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©!',
    is_enabled: false, // Disabled by default for testing
    send_once: true,
    priority: 'high',
    target_field_id: null,
    schedule: null,
  },
  {
    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á - ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 9 ‡πÇ‡∏°‡∏á',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô. (‡∏ó‡∏î‡∏™‡∏≠‡∏ö scheduled trigger)',
    trigger_type: 'scheduled',
    condition_formula: 'AND([‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°] + 7 < TODAY(), NOT(OR([‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢] = "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß", [‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢] = "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")))',
    message_template: '‚ö†Ô∏è **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á**\n\n' +
                      'üìã ‡∏á‡∏≤‡∏ô: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      'üìÖ ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°}\n' +
                      '‚è∞ ‡∏Ñ‡πâ‡∏≤‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß: 7+ ‡∏ß‡∏±‡∏ô\n\n' +
                      'üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏î‡πà‡∏ß‡∏ô!',
    is_enabled: false, // Disabled by default (requires proper form fields)
    send_once: false, // Can send multiple times for scheduled notifications
    priority: 'medium',
    target_field_id: null,
    schedule: '0 9 * * *', // Every day at 9:00 AM
  },
  {
    name: '‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå - ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
    description: '‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡πÄ‡∏ß‡∏•‡∏≤ 8:00 ‡∏ô. (‡∏ó‡∏î‡∏™‡∏≠‡∏ö weekly schedule)',
    trigger_type: 'scheduled',
    condition_formula: '[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢] = "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ"',
    message_template: 'üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå**\n\n' +
                      'üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢} ‡∏ö‡∏≤‡∏ó\n' +
                      'üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏µ‡∏•: {‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏µ‡∏•}\n' +
                      'üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢} ‡∏ö‡∏≤‡∏ó\n\n' +
                      '‚ú® ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ!',
    is_enabled: false,
    send_once: false,
    priority: 'low',
    target_field_id: null,
    schedule: '0 8 * * 1', // Every Monday at 8:00 AM
  },
  {
    name: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡∏™‡∏π‡∏á (4-5 ‡∏î‡∏≤‡∏ß)',
    description: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 4-5 ‡∏î‡∏≤‡∏ß (‡∏ó‡∏î‡∏™‡∏≠‡∏ö range check)',
    trigger_type: 'field_update',
    condition_formula: 'AND([‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô] >= 4, [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô] <= 5)',
    message_template: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à!**\n\n' +
                      'üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      '‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô} ‡∏î‡∏≤‡∏ß\n' +
                      'üí¨ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: {‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô}\n\n' +
                      'üëè ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!',
    is_enabled: false,
    send_once: true,
    priority: 'medium',
    target_field_id: null,
    schedule: null,
  },
  {
    name: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö',
    description: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ó‡∏î‡∏™‡∏≠‡∏ö ISBLANK)',
    trigger_type: 'field_update',
    condition_formula: 'OR(ISBLANK([‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤]), ISBLANK([‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£]), ISBLANK([‡∏≠‡∏µ‡πÄ‡∏°‡∏•]))',
    message_template: '‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô**\n\n' +
                      'üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      'üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:\n' +
                      '- ‡∏ä‡∏∑‡πà‡∏≠: {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤}\n' +
                      '- ‡πÄ‡∏ö‡∏≠‡∏£‡πå: {‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£}\n' +
                      '- ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {‡∏≠‡∏µ‡πÄ‡∏°‡∏•}\n\n' +
                      'üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö',
    is_enabled: false,
    send_once: false, // Can notify multiple times until data is complete
    priority: 'low',
    target_field_id: null,
    schedule: null,
  },
];

/**
 * Seed notification rules into database
 */
async function seedNotificationRules() {
  try {
    logger.info('üå± Starting notification rules seeding...');

    // Test database connection
    await sequelize.authenticate();
    logger.info('‚úÖ Database connection established');

    // Find first form (for testing)
    const form = await Form.findOne({
      order: [['createdAt', 'ASC']],
    });

    if (!form) {
      logger.warn('‚ö†Ô∏è No forms found in database. Please create at least one form first.');
      logger.info('You can create a form using the Q-Collector UI at http://localhost:3000');
      process.exit(1);
    }

    logger.info(`üìã Found form: ${form.title} (ID: ${form.id})`);

    // Find first user (for created_by)
    const user = await User.findOne({
      order: [['createdAt', 'ASC']],
    });

    if (!user) {
      logger.warn('‚ö†Ô∏è No users found in database. Please create at least one user first.');
      process.exit(1);
    }

    logger.info(`üë§ Found user: ${user.username} (ID: ${user.id})`);

    // Check if notification rules already exist
    const existingRules = await NotificationRule.count();
    if (existingRules > 0) {
      logger.warn(`‚ö†Ô∏è Database already contains ${existingRules} notification rule(s).`);
      const readline = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout,
      });

      const answer = await new Promise((resolve) => {
        readline.question('Do you want to delete existing rules and reseed? (yes/no): ', resolve);
      });
      readline.close();

      if (answer.toLowerCase() !== 'yes') {
        logger.info('‚ùå Seeding cancelled by user');
        process.exit(0);
      }

      // Delete existing rules
      await NotificationRule.destroy({ where: {}, truncate: true });
      logger.info('üóëÔ∏è Deleted existing notification rules');
    }

    // Create sample rules
    logger.info(`üìù Creating ${sampleRules.length} sample notification rules...`);

    const createdRules = [];
    for (const ruleData of sampleRules) {
      const rule = await NotificationRule.create({
        ...ruleData,
        form_id: form.id, // Link to first form
        created_by: user.id,
        updated_by: user.id,
        // Use default bot_token and group_id from .env
        bot_token: null,
        group_id: null,
      });

      createdRules.push(rule);
      logger.info(`  ‚úÖ Created: ${rule.name} (${rule.trigger_type})`);
    }

    logger.info('');
    logger.info('üéâ Notification rules seeded successfully!');
    logger.info('');
    logger.info('üìä Summary:');
    logger.info(`  - Total rules created: ${createdRules.length}`);
    logger.info(`  - Enabled rules: ${createdRules.filter(r => r.is_enabled).length}`);
    logger.info(`  - Disabled rules: ${createdRules.filter(r => !r.is_enabled).length}`);
    logger.info(`  - Field update triggers: ${createdRules.filter(r => r.trigger_type === 'field_update').length}`);
    logger.info(`  - Scheduled triggers: ${createdRules.filter(r => r.trigger_type === 'scheduled').length}`);
    logger.info('');
    logger.info('üí° Tips:');
    logger.info('  1. Enable rules in the Q-Collector UI to start receiving notifications');
    logger.info('  2. Update message templates to match your form field names');
    logger.info('  3. Set TELEGRAM_BOT_TOKEN and TELEGRAM_GROUP_ID in .env file');
    logger.info('  4. Test rules using the "Test Notification" button in the UI');
    logger.info('');

    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Error seeding notification rules:', error);
    process.exit(1);
  }
}

// Run seeding if executed directly
if (require.main === module) {
  seedNotificationRules();
}

module.exports = { seedNotificationRules, sampleRules };
