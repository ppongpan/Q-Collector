# Security Scanning Workflow for Q-Collector v0.9.0-dev
# Automated security scanning on every push and PR
# Implements Phase 3 of Security Hardening Plan

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM Bangkok time (7 PM UTC)
    - cron: '0 19 * * *'
  workflow_dispatch: # Allow manual triggers

# Cancel in-progress runs when a new one starts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # Required for CodeQL upload

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: npm ci

      - name: Run npm audit (Backend)
        id: audit-backend
        run: |
          cd backend
          npm audit --json > ../backend-audit.json || true
          npm audit --audit-level=high

      - name: Run npm audit (Frontend)
        id: audit-frontend
        run: |
          npm audit --json > frontend-audit.json || true
          npm audit --audit-level=high

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-results
          path: |
            backend-audit.json
            frontend-audit.json
          retention-days: 30

  # Job 2: SAST (Static Application Security Testing)
  sast-scan:
    name: SAST - CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Job 3: Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan for secrets
        run: |
          trufflehog filesystem . --json --no-update > trufflehog-results.json || true

      - name: Check for secrets (fail if found)
        run: |
          if [ -s trufflehog-results.json ] && [ "$(cat trufflehog-results.json | wc -l)" -gt 0 ]; then
            echo "❌ Secrets detected in the codebase!"
            cat trufflehog-results.json
            exit 1
          else
            echo "✅ No secrets detected"
          fi

      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-results
          path: trufflehog-results.json
          retention-days: 30

  # Job 4: Container Security Scanning (Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker-compose build --no-cache

      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan PostgreSQL image
        run: |
          trivy image postgres:16-alpine --severity HIGH,CRITICAL --format json --output postgres-scan.json || true

      - name: Scan Redis image
        run: |
          trivy image redis:7-alpine --severity HIGH,CRITICAL --format json --output redis-scan.json || true

      - name: Scan MinIO image
        run: |
          trivy image minio/minio:latest --severity HIGH,CRITICAL --format json --output minio-scan.json || true

      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: container-scan-results
          path: |
            postgres-scan.json
            redis-scan.json
            minio-scan.json
          retention-days: 30

  # Job 5: OWASP ZAP DAST (Dynamic Application Security Testing)
  dast-scan:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Only run on scheduled scans (daily)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30 # Wait for services to start

      - name: Wait for application to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:5000/health; do sleep 5; done' || exit 1

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'
          allow_issue_writing: false

      - name: Stop application
        if: always()
        run: |
          docker-compose down

  # Job 6: License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check backend licenses
        run: |
          cd backend
          npm ci
          license-checker --json --out ../backend-licenses.json

      - name: Check frontend licenses
        run: |
          npm ci
          license-checker --json --out frontend-licenses.json

      - name: Check for prohibited licenses
        run: |
          # List of prohibited licenses (copyleft, proprietary)
          PROHIBITED="GPL-1.0,GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0,LGPL-2.0,LGPL-2.1,LGPL-3.0,SSPL-1.0,BUSL-1.1"

          if grep -qE "$PROHIBITED" backend-licenses.json frontend-licenses.json; then
            echo "❌ Prohibited licenses detected!"
            grep -E "$PROHIBITED" backend-licenses.json frontend-licenses.json
            exit 1
          else
            echo "✅ No prohibited licenses found"
          fi

      - name: Upload license results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: license-check-results
          path: |
            backend-licenses.json
            frontend-licenses.json
          retention-days: 30

  # Job 7: Security Report Summary
  security-summary:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, license-check]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v6

      - name: Generate summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ **Dependency Scan:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Scan:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.sast-scan.result }}" == "success" ]; then
            echo "✅ **SAST (CodeQL):** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **SAST (CodeQL):** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ **Secret Scanning:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Secret Scanning:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "✅ **License Compliance:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **License Compliance:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review scan results in the 'Actions' tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Download artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
          echo "3. Fix any high/critical vulnerabilities immediately" >> $GITHUB_STEP_SUMMARY
          echo "4. Update dependencies with security patches" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Generated by Q-Collector Security Scan Workflow v0.9.0-dev" >> $GITHUB_STEP_SUMMARY

# Environment variables
env:
  NODE_ENV: test
  CI: true

# Workflow notes:
#
# 1. **Trigger Conditions:**
#    - On push to main/develop branches
#    - On pull requests to main/develop
#    - Daily at 2 AM Bangkok time (scheduled)
#    - Manual trigger via workflow_dispatch
#
# 2. **Security Scans Performed:**
#    - Dependency vulnerabilities (npm audit)
#    - Static code analysis (CodeQL)
#    - Secret scanning (TruffleHog)
#    - Container security (Trivy)
#    - Dynamic testing (OWASP ZAP, scheduled only)
#    - License compliance (license-checker)
#
# 3. **Scan Results:**
#    - All results uploaded as artifacts (30-day retention)
#    - Summary generated in GitHub Actions summary
#    - CodeQL results uploaded to GitHub Security tab
#
# 4. **Fail Conditions:**
#    - High/critical vulnerabilities in dependencies
#    - Secrets detected in code
#    - Prohibited licenses found
#    - CodeQL security issues found
#
# 5. **Performance:**
#    - Parallel execution of independent scans
#    - Cancel in-progress runs for new commits
#    - Node.js caching for faster installations
#
# 6. **Security Best Practices:**
#    - Minimal permissions (read + security-events write)
#    - Full git history for secret scanning
#    - Fresh builds (--no-cache) for container scans
#    - Timeout protections (300s for DAST)
#
# Next Steps:
# 1. Enable GitHub Advanced Security for CodeQL
# 2. Configure branch protection rules to require scan passing
# 3. Setup notifications for security alerts
# 4. Create .zap/rules.tsv for OWASP ZAP configuration
