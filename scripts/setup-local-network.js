#!/usr/bin/env node

/**
 * Local Network Testing Setup for Q-Collector
 *
 * This script automates the local network configuration:
 * 1. Detects PC's local IP address
 * 2. Updates .env files with local IP
 * 3. Configures React dev server to listen on 0.0.0.0
 * 4. Provides mobile testing URL
 *
 * Version: v0.7.8-dev
 *
 * Usage:
 *   node scripts/setup-local-network.js
 */

const os = require('os');
const fs = require('fs');
const path = require('path');

// ANSI color codes
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

const log = {
  info: (msg) => console.log(`${colors.blue}ℹ${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}✔${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}⚠${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}✖${colors.reset} ${msg}`),
  header: (msg) => console.log(`\n${colors.bright}${colors.cyan}${msg}${colors.reset}\n`),
};

/**
 * Get local IP address
 */
function getLocalIPAddress() {
  const interfaces = os.networkInterfaces();

  // Try to find WiFi adapter first
  for (const name of Object.keys(interfaces)) {
    if (name.toLowerCase().includes('wi-fi') || name.toLowerCase().includes('wireless')) {
      for (const iface of interfaces[name]) {
        if (iface.family === 'IPv4' && !iface.internal) {
          return iface.address;
        }
      }
    }
  }

  // Fallback: any non-internal IPv4 address
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }

  return null;
}

/**
 * Update .env file
 */
function updateEnvFile(filePath, key, value) {
  if (!fs.existsSync(filePath)) {
    throw new Error(`File not found: ${filePath}`);
  }

  let content = fs.readFileSync(filePath, 'utf8');
  const regex = new RegExp(`^${key}=.*$`, 'm');

  if (regex.test(content)) {
    content = content.replace(regex, `${key}=${value}`);
  } else {
    content += `\n${key}=${value}\n`;
  }

  fs.writeFileSync(filePath, content, 'utf8');
}

/**
 * Create or update .env.development.local
 */
function setupReactDevServer(rootDir) {
  const envLocalPath = path.join(rootDir, '.env.development.local');
  const content = `# Local Network Testing Configuration
# Auto-generated by setup-local-network.js
HOST=0.0.0.0
PORT=3000
`;
  fs.writeFileSync(envLocalPath, content, 'utf8');
  return envLocalPath;
}

/**
 * Main setup function
 */
async function setup() {
  log.header('🌐 Q-Collector Local Network Testing Setup v0.7.8-dev');

  try {
    // Step 1: Detect local IP
    log.info('Detecting local IP address...');
    const localIP = getLocalIPAddress();

    if (!localIP) {
      log.error('Could not detect local IP address!');
      log.info('Make sure you are connected to WiFi.');
      log.info('');
      log.info('Manual setup:');
      log.info('1. Run: ipconfig');
      log.info('2. Find "Wireless LAN adapter Wi-Fi" → "IPv4 Address"');
      log.info('3. Update .env files manually');
      process.exit(1);
    }

    log.success(`Detected IP: ${localIP}`);

    // Step 2: Update environment files
    log.header('📝 Updating Configuration Files');

    const rootDir = path.resolve(__dirname, '..');
    const frontendEnvPath = path.join(rootDir, '.env');
    const backendEnvPath = path.join(rootDir, 'backend', '.env');

    // Update frontend .env
    const apiUrl = `http://${localIP}:5000/api/v1`;
    const corsOrigin = `http://${localIP}:3000`;

    updateEnvFile(frontendEnvPath, 'REACT_APP_API_URL', apiUrl);
    log.success(`Updated .env: REACT_APP_API_URL=${apiUrl}`);

    updateEnvFile(frontendEnvPath, 'CORS_ORIGIN', corsOrigin);
    log.success(`Updated .env: CORS_ORIGIN=${corsOrigin}`);

    // Update backend .env
    updateEnvFile(backendEnvPath, 'CORS_ORIGIN', corsOrigin);
    log.success(`Updated backend/.env: CORS_ORIGIN=${corsOrigin}`);

    // Step 3: Configure React dev server
    const envLocalPath = setupReactDevServer(rootDir);
    log.success(`Created ${path.basename(envLocalPath)} for React dev server`);

    // Step 4: Instructions
    log.header('🔄 Next Steps');

    log.info('1. Restart your servers:');
    log.info('   Frontend: Ctrl+C, then: npm run dev');
    log.info('   Backend:  Ctrl+C, then: cd backend && npm run dev');
    log.info('');
    log.info('2. Allow firewall access:');
    log.warning('   When Windows Firewall prompts, click "Allow access"');
    log.info('');
    log.info('3. Connect your phone to the SAME WiFi network');
    log.info('');
    log.info('4. Test on mobile:');
    log.success(`   Open: http://${localIP}:3000`);
    log.info('');
    log.info('💡 Pro Tip: Bookmark this URL on your phone for quick testing!');
    log.info('');
    log.success('Setup complete! ✅');
    log.info('');
    log.header('📱 Your Mobile Testing URL');
    console.log(`
    ┌─────────────────────────────────────────┐
    │                                         │
    │   http://${localIP}:3000         │
    │                                         │
    └─────────────────────────────────────────┘
    `);

    log.info('Scan this with your phone camera (if QR code enabled) or type manually.');

  } catch (error) {
    log.error(`Setup failed: ${error.message}`);
    log.info('');
    log.info('Troubleshooting:');
    log.info('  1. Make sure you are connected to WiFi');
    log.info('  2. Check Windows Firewall settings');
    log.info('  3. Verify .env files exist in the project');
    process.exit(1);
  }
}

// Run setup
setup();
