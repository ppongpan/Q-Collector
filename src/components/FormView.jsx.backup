import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react';
import { motion } from 'framer-motion';
import { GlassCard, GlassCardContent } from './ui/glass-card';
import { GlassButton } from './ui/glass-button';
import { GlassInput, GlassTextarea, GlassSelect } from './ui/glass-input';
import { ValidatedGlassInput } from './ui/field-validation';
import { useToast } from './ui/toast';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSave, faMapMarkerAlt, faStar } from '@fortawesome/free-solid-svg-icons';

// Data services
import dataService from '../services/DataService.js';
import submissionService from '../services/SubmissionService.js';

const FormView = forwardRef(({ formId, submissionId, onSave, onCancel }, ref) => {
  const [form, setForm] = useState(null);
  const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [fieldErrors, setFieldErrors] = useState({});
  const [fieldTouched, setFieldTouched] = useState({});

  // Toast notifications
  const toast = useToast();

  // Load form and submission data
  useEffect(() => {
    loadFormData();
  }, [formId, submissionId]); // eslint-disable-line react-hooks/exhaustive-deps

  // Expose handleSubmit function to parent component via ref
  useImperativeHandle(ref, () => ({
    handleSubmit
  }));

  const loadFormData = async () => {
    setLoading(true);
    try {
      // Load form
      const formData = dataService.getForm(formId);
      if (!formData) {
        console.error('Form not found:', formId);
        return;
      }
      setForm(formData);

      // Load existing submission for editing
      if (submissionId) {
        const submission = dataService.getSubmission(submissionId);
        if (submission) {
          setFormData(submission.data || {});
        }
      }
    } catch (error) {
      console.error('Error loading form data:', error);
    } finally {
      setLoading(false);
    }
  };

  // Validation functions
  const validateField = (field, value) => {
    // Helper function to check if value is empty
    const isEmpty = (val) => {
      if (val === null || val === undefined) return true;
      if (typeof val === 'string') return val.trim() === '';
      if (Array.isArray(val)) return val.length === 0;
      if (typeof val === 'object') {
        // For objects like lat_long, check if it has meaningful values
        if (field.type === 'lat_long') {
          return !val.lat || !val.lng;
        }
        // For other objects, check if they have any keys
        return Object.keys(val).length === 0;
      }
      if (typeof val === 'number') return isNaN(val);
      return false;
    };

    // Check required fields
    if (field.required && isEmpty(value)) {
      return 'ฟิลด์นี้จำเป็นต้องกรอก';
    }

    // If field is empty and not required, skip validation
    if (!field.required && isEmpty(value)) {
      return '';
    }

    // Type-specific validation (only if value exists)
    if (!isEmpty(value)) {
      switch (field.type) {
        case 'email':
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(value)) {
            return 'รูปแบบอีเมลไม่ถูกต้อง';
          }
          break;
        case 'phone':
          const phoneRegex = /^[0-9\-\+\(\)\s]+$/;
          if (!phoneRegex.test(value)) {
            return 'รูปแบบเบอร์โทรศัพท์ไม่ถูกต้อง';
          }
          break;
        case 'url':
          try {
            new URL(value);
          } catch {
            return 'รูปแบบ URL ไม่ถูกต้อง';
          }
          break;
        case 'number':
          if (isNaN(value) || value === '') {
            return 'กรุณากรอกตัวเลขที่ถูกต้อง';
          }
          break;
        case 'multiple_choice':
          // Multiple choice validation is handled by the isEmpty check above
          break;
        case 'rating':
          // Rating validation is handled by the isEmpty check above
          break;
        case 'slider':
          // Slider validation is handled by the isEmpty check above
          break;
        case 'lat_long':
          // Lat/Long validation - check if it has both lat and lng
          if (value && typeof value === 'object') {
            if (!value.lat || !value.lng) {
              return 'กรุณาเลือกตำแหน่งให้ครบถ้วน';
            }
          }
          break;
        case 'province':
        case 'factory':
          // Province and factory validation is handled by the isEmpty check above
          break;
      }
    }

    return '';
  };

  const handleInputChange = (fieldId, value) => {
    setFormData(prev => ({
      ...prev,
      [fieldId]: value
    }));

    // Mark field as touched
    setFieldTouched(prev => ({
      ...prev,
      [fieldId]: true
    }));

    // Validate field
    const field = form?.fields.find(f => f.id === fieldId);
    if (field) {
      const error = validateField(field, value);
      setFieldErrors(prev => ({
        ...prev,
        [fieldId]: error
      }));
    }
  };

  const handleFileChange = (fieldId, files) => {
    const updatedFiles = [...uploadedFiles];
    const existingIndex = updatedFiles.findIndex(f => f.fieldId === fieldId);

    if (existingIndex >= 0) {
      updatedFiles[existingIndex] = { fieldId, files: Array.from(files) };
    } else {
      updatedFiles.push({ fieldId, files: Array.from(files) });
    }

    setUploadedFiles(updatedFiles);
  };

  const handleGPSLocation = async (fieldId) => {
    try {
      const position = await submissionService.getCurrentPosition();
      handleInputChange(fieldId, {
        lat: position.lat,
        lng: position.lng,
        accuracy: position.accuracy,
        timestamp: position.timestamp
      });
      toast.success('ได้รับตำแหน่งปัจจุบันแล้ว');
    } catch (error) {
      console.error('GPS error:', error);
      toast.error('ไม่สามารถรับตำแหน่งปัจจุบันได้: ' + error.message);
    }
  };

  // Form-level validation
  const validateAllFields = () => {
    const errors = {};
    const touched = {};
    let hasErrors = false;

    console.log('=== Form Validation Debug ===');
    console.log('Form fields:', form.fields);
    console.log('Form data:', formData);
    console.log('Uploaded files:', uploadedFiles);

    form.fields.forEach(field => {
      let error = '';

      // Special handling for file upload fields
      if (field.type === 'file_upload' || field.type === 'image_upload') {
        const fieldFiles = uploadedFiles.find(uf => uf.fieldId === field.id);
        console.log(`File field ${field.title} (${field.id}):`, { required: field.required, files: fieldFiles });
        if (field.required && (!fieldFiles || fieldFiles.files.length === 0)) {
          error = 'ฟิลด์นี้จำเป็นต้องกรอก';
        }
      } else {
        // Regular field validation
        const value = formData[field.id];
        console.log(`Field ${field.title} (${field.id}):`, {
          type: field.type,
          required: field.required,
          value: value,
          isEmpty: !value || (typeof value === 'string' && value.trim() === '')
        });
        error = validateField(field, value);
      }

      if (error) {
        console.log(`Validation error for ${field.title}:`, error);
        errors[field.id] = error;
        touched[field.id] = true;
        hasErrors = true;
      }
    });

    console.log('Final validation result:', { hasErrors, errors });

    if (hasErrors) {
      setFieldErrors(errors);
      setFieldTouched(touched);
      toast.error('กรุณาแก้ไขข้อมูลในฟิลด์ที่มีข้อผิดพลาด');
      return false;
    }

    return true;
  };

  const handleSubmit = async () => {
    if (submitting) return;

    // Validate all fields before submission
    if (!validateAllFields()) {
      return;
    }

    setSubmitting(true);
    try {
      let result;
      if (submissionId) {
        // Update existing submission
        result = await submissionService.updateSubmission(submissionId, formData);
      } else {
        // Create new submission
        const flatFiles = uploadedFiles.flatMap(uf =>
          uf.files.map(file => ({ ...file, fieldId: uf.fieldId }))
        );
        result = await submissionService.submitForm(formId, formData, flatFiles);
      }

      if (result.success) {
        toast.success(result.message);
        if (onSave) {
          onSave(result.submission || result.updatedSubmission, !!submissionId);
        }
      } else {
        toast.error(result.message);
      }
    } catch (error) {
      console.error('Submit error:', error);
      toast.error('เกิดข้อผิดพลาด: ' + error.message);
    } finally {
      setSubmitting(false);
    }
  };

  const renderField = (field) => {
    const fieldValue = formData[field.id];

    // Check if field has validation error
    const hasError = field.required && validateField(field, fieldValue);

    // Wrapper function to add red neon effect for validation errors
    const wrapWithErrorEffect = (fieldComponent) => {
      if (hasError) {
        return (
          <div className="field-error-container p-3 rounded-xl transition-all duration-300">
            {fieldComponent}
          </div>
        );
      }
      return fieldComponent;
    };

    switch (field.type) {
      case 'short_answer':
      case 'email':
      case 'phone':
      case 'url':
        return wrapWithErrorEffect(
          <ValidatedGlassInput
            key={field.id}
            label={field.title}
            type={field.type === 'email' ? 'email' : field.type === 'phone' ? 'tel' : field.type === 'url' ? 'url' : 'text'}
            required={field.required}
            placeholder={field.placeholder || `กรอก${field.title}`}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
            error={fieldTouched[field.id] ? fieldErrors[field.id] : ''}
          />
        );

      case 'paragraph':
        return wrapWithErrorEffect(
          <GlassTextarea
            key={field.id}
            label={field.title}
            required={field.required}
            placeholder={field.placeholder || `กรอก${field.title}`}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
            rows={4}
          />
        );

      case 'number':
        return wrapWithErrorEffect(
          <ValidatedGlassInput
            key={field.id}
            type="number"
            label={field.title}
            required={field.required}
            placeholder={field.placeholder || `กরอก${field.title}`}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
            error={fieldTouched[field.id] ? fieldErrors[field.id] : ''}
          />
        );

      case 'date':
        return wrapWithErrorEffect(
          <GlassInput
            key={field.id}
            type="date"
            label={field.title}
            required={field.required}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
          />
        );

      case 'time':
        return wrapWithErrorEffect(
          <GlassInput
            key={field.id}
            type="time"
            label={field.title}
            required={field.required}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
          />
        );

      case 'datetime':
        return wrapWithErrorEffect(
          <GlassInput
            key={field.id}
            type="datetime-local"
            label={field.title}
            required={field.required}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
          />
        );

      case 'multiple_choice':
        const options = field.options?.options || [];
        const isMultiple = field.options?.allowMultiple || false;
        const displayStyle = field.options?.displayStyle || 'radio';

        if (!options || options.length === 0) {
          return wrapWithErrorEffect(
            <div key={field.id} className="space-y-3">
              <label className="block text-sm font-medium text-foreground/80">
                {field.title}
                {field.required && <span className="text-destructive ml-1">*</span>}
              </label>
              <div className="p-4 border border-border/40 rounded-lg bg-muted/10">
                <p className="text-muted-foreground text-sm">ยังไม่มีตัวเลือกสำหรับฟิลด์นี้</p>
              </div>
            </div>
          );
        }

        if (displayStyle === 'dropdown') {
          return wrapWithErrorEffect(
            <GlassSelect
              key={field.id}
              label={field.title}
              required={field.required}
              value={fieldValue || ''}
              onChange={(e) => handleInputChange(field.id, e.target.value)}
            >
              <option value="">เลือก...</option>
              {options.map((option, index) => (
                <option key={option.id || index} value={option.value || option.text || option}>
                  {option.text || option.value || option}
                </option>
              ))}
            </GlassSelect>
          );
        }

        if (displayStyle === 'buttons') {
          // Advanced layout calculation system
          const calculateOptimalLayout = (options) => {
            // Calculate max text length and estimate button width
            const maxLength = Math.max(...options.map(option => {
              const text = option.text || option.value || option;
              return String(text).length;
            }));

            // Estimate button width based on text length (approximate)
            // Base: 24px padding + 8px per character + 16px margin/gap
            const estimatedButtonWidth = 48 + (maxLength * 7);

            // Screen width breakpoints (approximate container widths)
            const breakpoints = {
              xs: 320,   // Mobile portrait
              sm: 576,   // Mobile landscape
              md: 768,   // Tablet
              lg: 1024,  // Desktop small
              xl: 1280   // Desktop large
            };

            // Calculate columns for each breakpoint
            const calculateColumns = (containerWidth) => {
              const availableWidth = containerWidth - 32; // Account for padding
              const cols = Math.floor(availableWidth / estimatedButtonWidth);
              return Math.max(1, Math.min(cols, options.length));
            };

            const layout = {
              xs: calculateColumns(breakpoints.xs),
              sm: calculateColumns(breakpoints.sm),
              md: calculateColumns(breakpoints.md),
              lg: calculateColumns(breakpoints.lg),
              xl: calculateColumns(breakpoints.xl)
            };

            // Generate responsive grid classes
            const gridClasses = [
              `grid gap-2`,
              `grid-cols-${layout.xs}`,
              `sm:grid-cols-${layout.sm}`,
              `md:grid-cols-${layout.md}`,
              `lg:grid-cols-${layout.lg}`,
              `xl:grid-cols-${layout.xl}`
            ].join(' ');

            return { gridClasses, maxLength, estimatedButtonWidth };
          };

          const { gridClasses, maxLength } = calculateOptimalLayout(options);

          return (
            <div key={field.id} className="space-y-3">
              <label className="block text-sm font-medium text-foreground/80">
                {field.title}
                {field.required && <span className="text-destructive ml-1">*</span>}
              </label>
              <div className={gridClasses}>
                {options.map((option, index) => {
                  const optionValue = option.value || option.text || option;
                  const optionText = option.text || option.value || option;
                  const isSelected = isMultiple
                    ? (fieldValue || []).includes(optionValue)
                    : fieldValue === optionValue;

                  return (
                    <button
                      key={option.id || index}
                      type="button"
                      onClick={() => {
                        if (isMultiple) {
                          const current = fieldValue || [];
                          const newValue = isSelected
                            ? current.filter(item => item !== optionValue)
                            : [...current, optionValue];
                          handleInputChange(field.id, newValue);
                        } else {
                          handleInputChange(field.id, optionValue);
                        }
                      }}
                      className={`
                        px-2 py-1.5 rounded-md border-2 transition-all duration-300 text-center focus:outline-none text-xs w-full
                        ${isSelected
                          ? 'border-primary bg-primary/10 text-primary'
                          : 'border-border/40 bg-muted/20 text-foreground/80 hover:border-primary/50 hover:bg-primary/5'
                        }
                      `}
                      style={{ minHeight: '32px' }}
                    >
                      <span className="truncate block">{optionText}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          );
        }

        // Default radio/checkbox style with advanced layout calculation
        const calculateRadioLayout = (options) => {
          // Calculate max text length and estimate item width for radio/checkbox
          const maxLength = Math.max(...options.map(option => {
            const text = option.text || option.value || option;
            return String(text).length;
          }));

          // Estimate item width for radio/checkbox style
          // Base: 20px radio + 8px gap + text width (7px per char) + 16px padding
          const estimatedItemWidth = 44 + (maxLength * 7);

          // Screen width breakpoints (approximate container widths)
          const breakpoints = {
            xs: 320,   // Mobile portrait
            sm: 576,   // Mobile landscape
            md: 768,   // Tablet
            lg: 1024,  // Desktop small
            xl: 1280   // Desktop large
          };

          // Calculate columns for each breakpoint
          const calculateColumns = (containerWidth) => {
            const availableWidth = containerWidth - 32; // Account for padding
            const cols = Math.floor(availableWidth / estimatedItemWidth);
            return Math.max(1, Math.min(cols, options.length));
          };

          const layout = {
            xs: calculateColumns(breakpoints.xs),
            sm: calculateColumns(breakpoints.sm),
            md: calculateColumns(breakpoints.md),
            lg: calculateColumns(breakpoints.lg),
            xl: calculateColumns(breakpoints.xl)
          };

          // Generate responsive grid classes for radio/checkbox
          const gridClasses = [
            `grid gap-1`,
            `grid-cols-${layout.xs}`,
            `sm:grid-cols-${layout.sm}`,
            `md:grid-cols-${layout.md}`,
            `lg:grid-cols-${layout.lg}`,
            `xl:grid-cols-${layout.xl}`
          ].join(' ');

          return { gridClasses, maxLength, estimatedItemWidth };
        };

        const { gridClasses } = calculateRadioLayout(options);

        return (
          <div key={field.id} className="space-y-3">
            <label className="block text-sm font-medium text-foreground/80">
              {field.title}
              {field.required && <span className="text-destructive ml-1">*</span>}
            </label>
            <div className={gridClasses}>
              {options.map((option, index) => {
                const optionValue = option.value || option.text || option;
                const optionText = option.text || option.value || option;

                return (
                  <label key={option.id || index} className="flex items-center cursor-pointer py-1 transition-colors" style={{ gap: '4px' }}>
                    <input
                      type={isMultiple ? "checkbox" : "radio"}
                      name={field.id}
                      value={optionValue}
                      checked={
                        isMultiple
                          ? (fieldValue || []).includes(optionValue)
                          : fieldValue === optionValue
                      }
                      onChange={(e) => {
                        if (isMultiple) {
                          const current = fieldValue || [];
                          const newValue = e.target.checked
                            ? [...current, optionValue]
                            : current.filter(item => item !== optionValue);
                          handleInputChange(field.id, newValue);
                        } else {
                          handleInputChange(field.id, optionValue);
                        }
                      }}
                      className="flex-shrink-0"
                      style={{
                        width: '13px',
                        height: '13px',
                        margin: '0',
                        padding: '0',
                        border: 'none',
                        outline: 'none',
                        boxShadow: 'none',
                        appearance: 'auto',
                        accentColor: '#f97316'
                      }}
                      onFocus={(e) => {
                        e.target.style.outline = 'none';
                        e.target.style.boxShadow = 'none';
                      }}
                    />
                    <span className="text-foreground/80 flex-1 text-xs truncate">{optionText}</span>
                  </label>
                );
              })}
            </div>
          </div>
        );

      case 'rating':
        const maxRating = field.options?.maxRating || 5;
        const currentRating = parseInt(fieldValue) || 0;

        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-foreground/80">
              {field.title}
              {field.required && <span className="text-destructive ml-1">*</span>}
            </label>
            <div className="flex gap-1">
              {[...Array(maxRating)].map((_, index) => (
                <button
                  key={index}
                  type="button"
                  onClick={() => handleInputChange(field.id, index + 1)}
                  className={`p-1 transition-colors ${
                    index < currentRating
                      ? 'text-yellow-400 hover:text-yellow-500'
                      : 'text-muted-foreground/40 hover:text-yellow-300'
                  }`}
                >
                  <FontAwesomeIcon icon={faStar} className="w-6 h-6" />
                </button>
              ))}
              <span className="ml-2 text-sm text-muted-foreground">
                {currentRating > 0 ? `${currentRating}/${maxRating}` : 'ยังไม่ได้เลือก'}
              </span>
            </div>
          </div>
        );

      case 'slider':
        const min = field.options?.min || 0;
        const max = field.options?.max || 100;
        const step = field.options?.step || 1;

        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-foreground/80">
              {field.title}
              {field.required && <span className="text-destructive ml-1">*</span>}
            </label>
            <div className="space-y-2">
              <input
                type="range"
                min={min}
                max={max}
                step={step}
                value={fieldValue || min}
                onChange={(e) => handleInputChange(field.id, e.target.value)}
                className="w-full h-2 bg-muted rounded-lg appearance-none cursor-pointer slider"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>{min}</span>
                <span className="font-semibold text-foreground">ค่าที่เลือก: {fieldValue || min}</span>
                <span>{max}</span>
              </div>
            </div>
          </div>
        );

      case 'file_upload':
      case 'image_upload':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-foreground/80">
              {field.title}
              {field.required && <span className="text-destructive ml-1">*</span>}
            </label>
            <input
              type="file"
              accept={field.type === 'image_upload' ? 'image/*' : undefined}
              multiple={field.options?.allowMultiple}
              onChange={(e) => handleFileChange(field.id, e.target.files)}
              className="block w-full text-sm text-foreground file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90 transition-colors"
            />
          </div>
        );

      case 'lat_long':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-foreground/80">
              {field.title}
              {field.required && <span className="text-destructive ml-1">*</span>}
            </label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
              <GlassInput
                type="number"
                step="any"
                placeholder="ละติจูด"
                value={fieldValue?.lat || ''}
                onChange={(e) => handleInputChange(field.id, {
                  ...fieldValue,
                  lat: e.target.value
                })}
              />
              <GlassInput
                type="number"
                step="any"
                placeholder="ลองจิจูด"
                value={fieldValue?.lng || ''}
                onChange={(e) => handleInputChange(field.id, {
                  ...fieldValue,
                  lng: e.target.value
                })}
              />
            </div>
            <GlassButton
              type="button"
              onClick={() => handleGPSLocation(field.id)}
              variant="secondary"
              className="w-full sm:w-auto"
            >
              <FontAwesomeIcon icon={faMapMarkerAlt} className="w-4 h-4 mr-2" />
              ใช้ตำแหน่งปัจจุบัน
            </GlassButton>
          </div>
        );

      case 'province':
        const provinces = [
          "กรุงเทพมหานคร", "กระบี่", "กาญจนบุรี", "กาฬสินธุ์", "กำแพงเพชร", "ขอนแก่น",
          "จันทบุรี", "ฉะเชิงเทรา", "ชลบุรี", "ชัยนาท", "ชัยภูมิ", "ชุมพร", "เชียงราย",
          "เชียงใหม่", "ตรัง", "ตราด", "ตาก", "นครนายก", "นครปฐม", "นครพนม", "นครราชสีมา",
          "นครศรีธรรมราช", "นครสวรรค์", "นนทบุรี", "นราธิวาส", "น่าน", "บึงกาฬ", "บุรีรัมย์",
          "ปทุมธานี", "ประจวบคีรีขันธ์", "ปราจีนบุรี", "ปัตตานี", "พระนครศรีอยุธยา", "พังงา",
          "พัทลุง", "พิจิตร", "พิษณุโลก", "เพชรบุรี", "เพชรบูรณ์", "แพร่", "พะเยา", "ภูเก็ต",
          "มหาสารคาม", "มุกดาหาร", "แม่ฮ่องสอน", "ยะลา", "ยโสธร", "ร้อยเอ็ด", "ระนอง", "ระยอง",
          "ราชบุรี", "ลพบุรี", "ลำปาง", "ลำพูน", "เลย", "ศรีสะเกษ", "สกลนคร", "สงขลา", "สตูล",
          "สมุทรปราการ", "สมุทรสงคราม", "สมุทรสาคร", "สระแก้ว", "สระบุรี", "สิงห์บุรี", "สุโขทัย",
          "สุพรรณบุรี", "สุราษฎร์ธานี", "สุรินทร์", "หนองคาย", "หนองบัวลำภู", "อ่างทอง", "อุดรธานี",
          "อุทัยธานี", "อุตรดิตถ์", "อุบลราชธานี", "อำนาจเจริญ"
        ];

        return (
          <GlassSelect
            key={field.id}
            label={field.title}
            required={field.required}
            value={fieldValue || ''}
            onChange={(e) => handleInputChange(field.id, e.target.value)}
          >
            <option value="">เลือกจังหวัด...</option>
            {provinces.map((province, index) => (
              <option key={index} value={province}>{province}</option>
            ))}
          </GlassSelect>
        );

      case 'factory':
        const factories = ['โรงงานบางปะอิน', 'โรงงานระยอง', 'โรงงานสระบุรี', 'โรงงานสงขลา'];

        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-foreground/80">
              {field.title}
              {field.required && <span className="text-destructive ml-1">*</span>}
            </label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
              {factories.map((factory, index) => (
                <label key={index} className="flex items-center gap-2 cursor-pointer p-3 rounded-lg border border-border/40 hover:bg-accent/20 transition-colors">
                  <input
                    type="checkbox"
                    name={field.id}
                    value={factory}
                    checked={(fieldValue || []).includes(factory)}
                    onChange={(e) => {
                      const current = fieldValue || [];
                      const newValue = e.target.checked
                        ? [...current, factory]
                        : current.filter(item => item !== factory);
                      handleInputChange(field.id, newValue);
                    }}
                    className="w-4 h-4 text-primary border-border/40 rounded focus:ring-primary/40"
                  />
                  <span className="text-foreground/80">{factory}</span>
                </label>
              ))}
            </div>
          </div>
        );

      default:
        return (
          <div key={field.id} className="p-4 border border-border/40 rounded-lg bg-muted/20">
            <p className="text-muted-foreground">
              ประเภทฟิลด์ "{field.type}" ยังไม่รองรับในการกรอกข้อมูล
            </p>
          </div>
        );
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background/95 to-background/90 flex items-center justify-center">
        <GlassCard className="glass-container">
          <GlassCardContent className="text-center py-8">
            <div className="text-xl font-semibold text-foreground/80">กำลังโหลดข้อมูล...</div>
          </GlassCardContent>
        </GlassCard>
      </div>
    );
  }

  if (!form) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background/95 to-background/90 flex items-center justify-center">
        <GlassCard className="glass-container">
          <GlassCardContent className="text-center py-8">
            <div className="text-xl font-semibold text-destructive">ไม่พบฟอร์มที่ระบุ</div>
            {onCancel && (
              <GlassButton onClick={onCancel} className="mt-4">
                กลับ
              </GlassButton>
            )}
          </GlassCardContent>
        </GlassCard>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background/95 to-background/90">
      <div className="container-responsive px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 py-2 sm:py-3">

        {/* Form Header - Outside Container */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="max-w-3xl mx-auto mb-6"
        >
          <div className="text-left">
            <h1 className="text-xl font-bold text-primary mb-4" style={{ fontSize: '20px' }}>
              {form.title}
            </h1>
            {form.description && (
              <div className="mb-4">
                <p className="text-sm sm:text-base text-muted-foreground leading-relaxed">
                  {form.description}
                </p>
              </div>
            )}
          </div>
        </motion.div>

        {/* Form Fields Container */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
          className="max-w-3xl mx-auto mb-8"
        >
          <GlassCard className="glass-container">
            <div className="p-4">
              <div className="space-y-4 sm:space-y-6">
                {/* Main Form Fields */}
                {form.fields?.map(field => renderField(field))}
              </div>
            </div>
          </GlassCard>
        </motion.div>

      </div>
    </div>
  );
});

export default FormView;